<?php

namespace VC\WebBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ReferenceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReferenceRepository extends EntityRepository
{

    public function getReferences($sortBy = 'name')
    {

        if ($sortBy == 'date') {
			$sortDirection = 'DESC';
			$sortByQuery = 'r.date';
		} elseif ($sortBy == 'building') {
			$sortDirection = 'ASC';
			$sortByQuery = 'r.building';
        } else {
            $sortDirection = 'ASC';
            $sortByQuery = 'r.title';
        }

        $query = $this
            ->createQueryBuilder('r')
            ->leftJoin('r.photos', 'p')
            ->select('r')
            ->where('r.category IS NOT NULL')
            ->orderBy($sortByQuery, $sortDirection)
            ->getQuery();

        return $query->getResult();
    }

    public function getReferencesByCategory(
    	$category,
	    $year,
	    $country,
	    $sortBy = 'default',
		$display = 'list'
    ) {

    	if ($sortBy == 'default') {
		    $sortDirection = 'DESC';
		    $sortByQuery = "r.important";

	    } elseif ($sortBy == 'year') {
            $sortDirection = 'DESC';
            $sortByQuery = 'r.year';
        } else {
            $sortDirection = 'ASC';
            $sortByQuery = 'r.building';
        }

        if ($display === 'table') {
	        $builder = $this
		        ->createQueryBuilder('r')
		        ->leftJoin('r.photos', 'p')
		        ->select('r')
		        ->orderBy($sortByQuery, $sortDirection);
        } else {
	        $builder = $this
		        ->createQueryBuilder('r')
		        ->innerJoin('r.photos', 'p')
		        ->select('r')
		        ->orderBy($sortByQuery, $sortDirection);
        }
        if ($sortBy == 'default') {
    		$builder->addOrderBy('r.building', 'ASC');
        }

        if ($category) {
	        $builder->where('r.category = :category')
		        ->setParameter('category', $category);
        }
        if ($year) {
        	$builder->andWhere('r.year = :year')
	            ->setParameter('year', $year);
        }
	    if ($country) {
		    $builder->andWhere('r.country = :country')
			    ->setParameter('country', $country);
	    }

	    $query = $builder->getQuery();

        return $query->getResult();
    }

    public function getImportantReferences($sortBy = 'name')
    {
        if ($sortBy == 'date') {
            $sortDirection = 'DESC';
            $sortByQuery = 'r.date';
        } else {
            $sortDirection = 'ASC';
            $sortByQuery = 'r.title';
        }
        $query = $this
            ->createQueryBuilder('r')
            ->leftJoin('r.photos', 'p')
            ->select('r')
            ->where('r.category IS NOT NULL')
            ->andWhere('r.important = 1')
            ->orderBy($sortByQuery, $sortDirection)
            ->getQuery();
        return $query->getResult();
    }

    public function getComplement($ids)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->select('r')
            ->where($qb->expr()->notIn('r.id', ':ids'));

        $qb->setParameter('ids', $ids);
        return $qb->getQuery()->getResult();
    }

    public function getYears()
    {
	    $result = $this
		    ->createQueryBuilder("r")
		    ->select("r.year")
		    ->distinct()
		    ->orderBy("r.year", "DESC")
		    ->getQuery()
		    ->getResult();
		return $result;
    }

    public function getCountries()
    {
	    $result = $this
		    ->createQueryBuilder("r")
		    ->select("r.country")
		    ->distinct()
		    ->orderBy("r.country", "ASC")
		    ->getQuery()
		    ->getResult();
	    return $result;
    }

}
